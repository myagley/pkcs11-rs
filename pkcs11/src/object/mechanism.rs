use bitflags::bitflags;
use pkcs11_sys::*;

bitflags! {
    /// Bit flags specifying mechanism capabilities.
    pub struct MechanismFlags: CK_FLAGS {
        const HW = CKF_HW as CK_FLAGS;
        const ENCRYPT = CKF_ENCRYPT as CK_FLAGS;
        const DECRYPT = CKF_DECRYPT as CK_FLAGS;
        const DIGEST = CKF_DIGEST as CK_FLAGS;
        const SIGN = CKF_SIGN as CK_FLAGS;
        const SIGN_RECOVER = CKF_SIGN_RECOVER as CK_FLAGS;
        const VERIFY = CKF_VERIFY as CK_FLAGS;
        const VERIFY_RECOVER = CKF_VERIFY_RECOVER as CK_FLAGS;
        const GENERATE = CKF_GENERATE as CK_FLAGS;
        const GENERATE_KEY_PAIR = CKF_GENERATE_KEY_PAIR as CK_FLAGS;
        const WRAP = CKF_WRAP as CK_FLAGS;
        const UNWRAP = CKF_UNWRAP as CK_FLAGS;
        const DERIVE = CKF_DERIVE as CK_FLAGS;
        const EXTENSION = CKF_EXTENSION as CK_FLAGS;
    }
}

/// A value that identifies a mechanism type.
///
/// Mechanism types are defined with the objects and mechanism descriptions that
/// use them.
///
/// Vendor defined values for this type may also be specified.
#[derive(Debug, PartialEq)]
pub enum MechanismType {
    Acti,
    ActiKeyGen,
    AesCbc,
    AesCbcEncryptData,
    AesCbcPad,
    AesCcm,
    AesCfb1,
    AesCfb8,
    AesCfb64,
    AesCfb128,
    AesCmac,
    AesCmacGeneral,
    AesCtr,
    AesCts,
    AesEcb,
    AesEcbEncryptData,
    AesGcm,
    AesGmac,
    AesKeyGen,
    AesKeyWrap,
    AesKeyWrapPad,
    AesMac,
    AesMacGeneral,
    AesOfb,
    AesXcbcMac,
    AesXcbcMac96,
    AriaCbc,
    AriaCbcEncryptData,
    AriaCbcPad,
    AriaEcb,
    AriaEcbEncryptData,
    AriaKeyGen,
    AriaMac,
    AriaMacGeneral,
    BatonCbc128,
    BatonCounter,
    BatonEcb96,
    BatonEcb128,
    BatonKeyGen,
    BatonShuffle,
    BatonWrap,
    BlowfishCbc,
    BlowfishCbcPad,
    BlowfishKeyGen,
    CamelliaCbc,
    CamelliaCbcEncryptData,
    CamelliaCbcPad,
    CamelliaCtr,
    CamelliaEcb,
    CamelliaEcbEncryptData,
    CamelliaKeyGen,
    CamelliaMac,
    CamelliaMacGeneral,
    Cast3KeyGen,
    Cast3Ecb,
    Cast3Cbc,
    Cast3Mac,
    Cast3MacGeneral,
    Cast3CbcPad,
    Cast5KeyGen,
    Cast5Ecb,
    Cast5Cbc,
    Cast5Mac,
    Cast5MacGeneral,
    Cast5CbcPad,
    Cast128KeyGen,
    Cast128Ecb,
    Cast128Cbc,
    Cast128Mac,
    Cast128MacGeneral,
    Cast128CbcPad,
    CastCbc,
    CastCbcPad,
    CastEcb,
    CastKeyGen,
    CastMac,
    CastMacGeneral,
    CdmfCbc,
    CdmfCbcPad,
    CdmfEcb,
    CdmfKeyGen,
    CdmfMac,
    CdmfMacGeneral,
    CmsSig,
    ConcatenateBaseAndData,
    ConcatenateBaseAndKey,
    ConcatenateDataAndBase,
    Des2KeyGen,
    Des3KeyGen,
    Des3Ecb,
    Des3Cbc,
    Des3Mac,
    Des3MacGeneral,
    Des3CbcPad,
    Des3CmacGeneral,
    Des3Cmac,
    Des3EcbEncryptData,
    Des3CbcEncryptData,
    DesCbc,
    DesCbcEncryptData,
    DesCbcPad,
    DesCfb8,
    DesCfb64,
    DesEcb,
    DesEcbEncryptData,
    DesKeyGen,
    DesMac,
    DesMacGeneral,
    DesOfb8,
    DesOfb64,
    DhPkcsDerive,
    DhPkcsKeyPairGen,
    DhPkcsParameterGen,
    Dsa,
    DsaKeyPairGen,
    DsaParameterGen,
    DsaProbablisticParameterGen,
    DsaSha1,
    DsaSha224,
    DsaSha256,
    DsaSha384,
    DsaSha512,
    DsaShaweTaylorParameterGen,
    Ecdh1Derive,
    Ecdh1CofactorDerive,
    EcdhAesKeyWrap,
    Ecdsa,
    EcdsaKeyPairGen,
    EcdsaSha1,
    EcdsaSha224,
    EcdsaSha256,
    EcdsaSha384,
    EcdsaSha512,
    EcmqvDerive,
    EcKeyPairGen,
    ExtractKeyFromKey,
    Fasthash,
    FortezzaTimestamp,
    GenericSecretKeyGen,
    Gost28147KeyGen,
    Gost28147Ecb,
    Gost28147,
    Gost28147Mac,
    Gost28147KeyWrap,
    Gostr3410KeyPairGen,
    Gostr3410,
    Gostr3410KeyWrap,
    Gostr3410Derive,
    Gostr3411,
    Gostr3411Hmac,
    Gostr3410WithGostr3411,
    Hotp,
    HotpKeyGen,
    IdeaCbc,
    IdeaCbcPad,
    IdeaEcb,
    IdeaKeyGen,
    IdeaMac,
    IdeaMacGeneral,
    JuniperCbc128,
    JuniperCounter,
    JuniperEcb128,
    JuniperKeyGen,
    JuniperShuffle,
    JuniperWrap,
    KeaDerive,
    KeaKeyDerive,
    KeaKeyPairGen,
    KeyWrapLynks,
    KeyWrapSetOaep,
    KipDerive,
    KipMac,
    KipWrap,
    Md2RsaPkcs,
    Md2,
    Md2Hmac,
    Md2HmacGeneral,
    Md2KeyDerivation,
    Md5RsaPkcs,
    Md5,
    Md5Hmac,
    Md5HmacGeneral,
    Md5KeyDerivation,
    PbaSha1WithSha1Hmac,
    PbeMd2DesCbc,
    PbeMd5DesCbc,
    PbeMd5CastCbc,
    PbeMd5Cast3Cbc,
    PbeMd5Cast5Cbc,
    PbeMd5Cast128Cbc,
    PbeSha1Cast5Cbc,
    PbeSha1Cast128Cbc,
    PbeSha1Des2EdeCbc,
    PbeSha1Des3EdeCbc,
    PbeSha1Rc2_40Cbc,
    PbeSha1Rc2_128Cbc,
    PbeSha1Rc4_40,
    PbeSha1Rc4_128,
    Pkcs5Pbkd2,
    Rc2KeyGen,
    Rc2Ecb,
    Rc2Cbc,
    Rc2Mac,
    Rc2MacGeneral,
    Rc2CbcPad,
    Rc4KeyGen,
    Rc4,
    Rc5KeyGen,
    Rc5Ecb,
    Rc5Cbc,
    Rc5Mac,
    Rc5MacGeneral,
    Rrc5CbcPad,
    Ripemd128RsaPkcs,
    Ripemd128,
    Ripemd128Hmac,
    Ripemd128HmacGeneral,
    Ripemd160RsaPkcs,
    Ripemd160,
    Ripemd160Hmac,
    Ripemd160HmacGeneral,
    Rsa9796,
    RsaAesKeyWrap,
    RsaPkcs,
    RsaPkcsKeyPairGen,
    RsaPkcsOaep,
    RsaPkcsOaepTpm11,
    RsaPkcsPss,
    RsaPkcsTpm11,
    RsaX9_31KeyPairGen,
    RsaX9_31,
    RsaX509,
    Securid,
    SecuridKeyGen,
    SeedCbc,
    SeedCbcEncryptData,
    SeedCbcPad,
    SeedEcb,
    SeedEcbEncryptData,
    SeedKeyGen,
    SeedMac,
    SeedMacGeneral,
    Sha1RsaPkcs,
    Sha1RsaPkcsPss,
    Sha1KeyDerivation,
    Sha224RsaPkcs,
    Sha224RsaPkcsPss,
    Sha224,
    Sha224Hmac,
    Sha224HmacGeneral,
    Sha224KeyDerivation,
    Sha256RsaPkcs,
    Sha256RsaPkcsPss,
    Sha256,
    Sha256Hmac,
    Sha256HmacGeneral,
    Sha256KeyDerivation,
    Sha384RsaPkcs,
    Sha384RsaPkcsPss,
    Sha384,
    Sha384Hmac,
    Sha384HmacGeneral,
    Sha384KeyDerivation,
    Sha512RsaPkcs,
    Sha512RsaPkcsPss,
    Sha512T,
    Sha512THmac,
    Sha512THmacGeneral,
    Sha512TKeyDerivation,
    Sha512,
    Sha512Hmac,
    Sha512HmacGeneral,
    Sha512KeyDerivation,
    Sha1RsaX9_31,
    Sha512_224,
    Sha512_224Hmac,
    Sha512_224HmacGeneral,
    Sha512_224KeyDerivation,
    Sha512_256,
    Sha512_256Hmac,
    Sha512_256HmacGeneral,
    Sha512_256KeyDerivation,
    Sha1,
    Sha1Hmac,
    Sha1HmacGeneral,
    SkipjackCbc64,
    SkipjackCfb8,
    SkipjackCfb16,
    SkipjackCfb32,
    SkipjackCfb64,
    SkipjackEcb64,
    SkipjackKeyGen,
    SkipjackOfb64,
    SkipjackPrivateWrap,
    SkipjackRelayx,
    SkipjackWrap,
    Ssl3PreMasterKeyGen,
    Ssl3MasterKeyDerive,
    Ssl3KeyAndMacDerive,
    Ssl3MasterKeyDeriveDh,
    Ssl3Md5Mac,
    Ssl3Sha1Mac,
    Tls10MacServer,
    Tls10MacClient,
    Tls12Mac,
    Tls12Kdf,
    Tls12MasterKeyDerive,
    Tls12KeyAndMacDerive,
    Tls12MasterKeyDeriveDh,
    Tls12KeySafeDerive,
    TlsKdf,
    TlsKeyAndMacDerive,
    TlsMac,
    TlsMasterKeyDerive,
    TlsMasterKeyDeriveDh,
    TlsPreMasterKeyGen,
    TlsPrf,
    TwofishCbc,
    TwofishCbcPad,
    TwofishKeyGen,
    VendorDefined,
    WtlsClientKeyAndMacDerive,
    WtlsMasterKeyDerive,
    WtlsMasterKeyDeriveDhEcc,
    WtlsPreMasterKeyGen,
    WtlsPrf,
    WtlsServerKeyAndMacDerive,
    X9_42DhKeyPairGen,
    X9_42DhDerive,
    X9_42DhHybridDerive,
    X9_42MqvDerive,
    X9_42DhParameterGen,
    XorBaseAndData,
}
